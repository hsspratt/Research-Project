function [fitresult, gof] = StraightLineFit(w_straightline, v_straightline, std_straighline, wavelengths, voltages)
%CREATEFIT1(W_STRAIGHTLINE,V_STRAIGHTLINE,STD_STRAIGHLINE)
%  Create a fit.
%
%  Data for 'Straight Line Fit' fit:
%      X Input : w_straightline
%      Y Output: v_straightline
%      Weights : std_straighline
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 01-Apr-2022 16:23:30

% figures no display in LaTeX
set(groot,'defaultAxesTickLabelInterpreter','latex');  
set(groot,'defaulttextinterpreter','latex');
set(groot,'defaultLegendInterpreter','latex');

%% Fit: 'Straight Line Fit'.

[xData, yData, weights] = prepareCurveData(w_straightline, v_straightline, std_straighline );

% Set up fittype and options.
ft = fittype('poly1');
opts = fitoptions('Method', 'LinearLeastSquares');
opts.Weights = weights;

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

% Create a figure for the plots.
figure('Name', 'Straight Line Fit' );

% Plot fit with data.
subplot( 2, 1, 1 );
h = plot( fitresult, xData, yData, 'predobs', 0.999 );
legend( h, 'voltages vs. wavelengths with deviation', 'Straight Line Fit', 'Lower bounds (Straight Line Fit)', 'Upper bounds (Straight Line Fit)', 'Location', 'NorthWest');
hold on
% Label axes
xlabel('Wavelengths $(\lambda)$');
ylabel('Voltages (V)');
xlim([min(xData) max(xData)])
ylim([0 max(yData)])
grid on

% Plot residuals.
subplot( 2, 1, 2 );
h = plot( fitresult, xData, yData, 'residuals' );
legend( h, 'Straight Line Fit - residuals', 'Zero Line', 'Location', 'NorthWest');
% Label axes
xlabel('Wavelengths $(\lambda)$');
ylabel('Voltages (V)');

grid on


% Create a figure for the plots.
figure('Name', 'Fit with all wavelengths');

% Plot fit with data.
plot( fitresult, xData, yData, 'predobs');
hold on
plot(wavelengths, voltages)

% Label axes
xlabel('Wavelengths $(\lambda)$');
ylabel('Voltages (V)');
xlim([min(wavelengths) max(wavelengths)])
ylim([0 max(voltages)])
grid on

% calculation of band gap

% parameters for graph and coefficients

coefficients = coeffvalues(fitresult);

bandgap_wavelength = -coefficients(2)/coefficients(1);
disp(['The bandgap of GaAs is: ', num2str(bandgap_wavelength)])

x = linspace(0,1200,1200);
LOBF_y = x*coefficients(1) + coefficients(2);
%p = predint(fitresult,wavelengths,0.68,'observation','on');

% plots line of best fit -- lambda vs V
% Create a figure for the plots.

figure( 'Name', 'Band_Gap_With_LineOfBestFit' );

plot(fitresult, wavelengths, voltages, 'predobs', 0.68);
%hold on
%plot(wavelengths, p)
hold on
%plot(x, LOBF_y,'--','color','r');
%hold on
plot(w_straightline, v_straightline, 'k*');
hold on
plot(bandgap_wavelength,0, 'k*','MarkerSize', 10);
xlabel('Wavelengths $(\lambda)$')
ylabel('Voltages (V)')
xlim([min(wavelengths) max(wavelengths)])
ylim([0 max(voltages)])

disp('finished')

% StraightLineFit(w_straightline, v_straightline, std_straighline, wavelengths, voltages)
% 
% p = predint(fitresult,wavelengths,0.90,'observation','on')
% figure( 'Name', 'Band Gap Calculation' );
% plot(fitresult, wavelengths, voltages,'b-'), hold on, plot(wavelengths, p, 'm--')
% plot(w_straightline, v_straightline, 'k*');
% hold on
% plot(bandgap_wavelength,0, 'k*','MarkerSize', 10);
% xlabel('Energy $(eV)$')
% ylabel('Voltages (V)')
% legend('off')
% xlim([min(wavelengths) 1.7])
% ylim([0 max(voltages)])
% set(gca,'FontSize',16)

figure( 'Name', 'Alpha squared' )
hold on
plot(energy_ev, squarealpha)
plot(x,y)
plot(x, p, 'm--')
legend('off')
xlabel('Energy $(eV)$')
ylabel('Alpha Squared $(\alpha^2)$')
set(gca,'FontSize',16)
xlim([1.3 1.45])
ylim([0 max(squarealpha)])

load ErrorAnalysis.mat R_1
load ErrorAnalysis.mat T
load ErrorAnalysis.mat alpha_1
load ErrorAnalysis.mat energy_ev
load ErrorAnalysis.mat voltages_1
load ErrorAnalysis.mat voltages_0


R = R_1;
x = R;
y = T;
z = 0.44*10^(-3); %0.000417;
 
dx = (2.*x.^2.*y.^2.*(((8.*x.*y.^2-4.*(1-x).^3)./(2.*sqrt(4.*x.^2.*y.^2+(1-x).^4)) +2.*(1-x))./(2.*x.^2.*y.^2) - (sqrt(4.*x.^2.*y.^2+(1-x).^4)-(1-x).^2)./(x.^3.*y.^2)))./(z.*sqrt(4.*x.^2.*y.^2+(1-x).^4)-(1-x).^2);

dy = (2.*x.^2.*y.^2.*(((2)./(y.*sqrt(4.*x.^2.*y.^2+(1-x).^4)) - (sqrt(4.*x.^2.*y.^2+(1-x).^4)-(1-x).^2)./(x.^2.*y.^3)))./(z.*sqrt(4.*x.^2.*y.^2+(1-x).^4)-(1-x).^2));

dz = ((1)./(z.^2)).*log((sqrt((1-R).^4+4.*T.^2.*R.^2)-(1-R).^2)./(2.*T.^2.*R.^2));
% error on voltage
errVoltage = 0.001*ones(size(voltages_1));
% error on Transmission Coefficient
%errT = 0.2*ones(size(V0_1))
errT = T.*(((errVoltage./voltages_0).^2+(errVoltage./voltages_1).^2).^0.5);
% error on R
errR = R.*0.05; %0.01;
errz = 0.01*10^(-3)*ones(size(voltages_1)); %0.01*10^(-3);
errx = errR; %*ones(size(voltages_1));
erry = std;

% err_alpha = sqrt((dx.*errx).^(2)+(dy.*erry).^(2)+(dz.*errz).^(2)+(dz.*errz).^(2));
err_alpha = sqrt((dx.*errx).^(2)+(dy.*erry).^(2)+(dz.*errz).^(2));
% err_R_alpha = real(err_alpha);

alpha_GaAs = alpha_1;
eV_energy = energy_ev;

err_B = err_alpha./alpha_GaAs;

figure( 'Name', 'Alpha squared' )
errorbar(energy_ev,alpha_1,err_alpha)

figure( 'Name', 'Alpha squared' )
hold on
errorbar(energy_ev(2:end), squarealpha, err_alpha(2:end)*2, 'vertical')
plot(x,y, '*')
plot(x, p, 'm--')
legend('off')
xlabel('Energy $(eV)$')
ylabel('Alpha Squared $(\alpha^2)$')
set(gca,'FontSize',16)
xlim([1.3 1.45])
ylim([0 max(squarealpha)])


%%

p = predint(fittedmodel_squared,energy_ev,0.95);

figure( 'Name', 'Alpha squared' )
hold on
errorbar(energy_ev,alpha_squared,err_alpha)
plot(energy_ev, p, 'm--')
xlabel('Energy $(eV)$')
ylabel('Alpha Squared $(\alpha^2)$')
set(gca,'FontSize',16)
xlim([1.3 1.45])
ylim([0 max(alpha_squared)])

figure( 'Name', 'Alpha squared LOBF' )
hold on
plot(energy_ev, p, 'm--')
plot(energy_ev(523:544), alpha_squared(523:544),'k*')
plot(fittedmodel_squared)
xlabel('Energy $(eV)$')
ylabel('Alpha Squared $(\alpha^2)$')
set(gca,'FontSize',16)
legend('off')
xlim([min(energy_ev(523:544)) max(energy_ev(523:544))])
ylim([0 max(alpha_squared(523:544))])


  









